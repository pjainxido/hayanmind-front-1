{"version":3,"sources":["components/InfiniteScrollList/CommentBox.js","components/InfiniteScrollList/index.js","App.js","reportWebVitals.js","index.js","components/InfiniteScrollList/InfiniteScrollList.module.css"],"names":["CommentBox","data","className","styles","item","id","email","body","InfiniteScrollList","useState","loadRef","setLoadRef","page","setPage","commentList","setCommentList","callAPI","a","console","log","fetch","response","json","prev","error","useEffect","onInterSecting","entries","isIntersecting","observer","length","IntersectionObserver","root","rootMargin","threshold","observe","disconnect","container","section","map","idx","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uRAsBeA,EAnBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OACE,sBAAKC,UAAWC,IAAOC,KAAvB,UACE,gCACE,4CACCH,EAAKI,MAER,gCACE,uCACCJ,EAAKK,SAER,gCACE,yCACA,4BAAIL,EAAKM,cC+CFC,EA3DW,WACxB,IAD8B,EAEAC,mBAAS,MAFT,mBAEvBC,EAFuB,KAEdC,EAFc,OAGNF,mBAAS,GAHH,mBAGvBG,EAHuB,KAGjBC,EAHiB,OAIQJ,mBAAS,IAJjB,mBAIvBK,EAJuB,KAIVC,EAJU,KAUxBC,EAAO,uCAAG,WAAOJ,GAAP,iBAAAK,EAAA,6DACdC,QAAQC,IAAIP,GADE,kBAGWQ,MAAM,uDAAD,OAAwDR,EAAxD,mBAZlB,KASE,cAGNS,EAHM,gBAIOA,EAASC,OAJhB,OAINrB,EAJM,OAKZc,GAAe,SAACQ,GAAD,4BAAYA,GAAZ,YAAqBtB,OALxB,kDAOZiB,QAAQM,MAAR,MAPY,0DAAH,sDAWbC,qBAAU,WACRT,EAAQJ,KACP,CAACA,IAEJ,IAAMc,EAAiB,SAACC,GACPA,EAAQ,GACZC,gBApBXf,GAAQ,SAACU,GAAD,OAAUA,EAAO,MAwC3B,OAfAE,qBAAU,WACR,IAMII,EAKJ,OAJInB,GAAWI,EAAYgB,SACzBD,EAAW,IAAIE,qBAAqBL,EARtB,CACdM,KAAM,KACNC,WAAY,OACZC,UAAW,KAMFC,QAAQzB,GAEZ,kCAAMmB,SAAN,aAAM,EAAUO,gBACtB,CAACtB,IAGF,sBAAKZ,UAAWC,IAAOkC,UAAvB,UACE,qBAAKnC,UAAWC,IAAOmC,QAAvB,SACGxB,EAAYyB,KAAI,SAACnC,EAAMoC,GACtB,OAAO,cAAC,EAAD,CAAYvC,KAAMG,GAAWoC,QAGxC,qBAAKC,IAAK9B,EAAV,yB,MC9CS+B,MARf,WACE,OACE,qBAAKxC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,sCAAsC,QAAU,oCAAoC,KAAO,oC","file":"static/js/main.d5c08ea5.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./InfiniteScrollList.module.css\";\n\nconst CommentBox = ({ data }) => {\n  return (\n    <div className={styles.item}>\n      <div>\n        <h4>Comment Id</h4>\n        {data.id}\n      </div>\n      <div>\n        <h4>Email</h4>\n        {data.email}\n      </div>\n      <div>\n        <h4>Comment</h4>\n        <p>{data.body}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default CommentBox;\n","import React, { useState, useEffect } from 'react';\nimport styles from './InfiniteScrollList.module.css'\nimport CommentBox from './CommentBox';\n\nconst InfiniteScrollList= () => {\n  const LIMIT = 10;\n  const [loadRef, setLoadRef] = useState(null);\n  const [page, setPage] = useState(1);\n  const [commentList, setCommentList] = useState([]);\n\n  const loadComment = () => {\n    setPage((prev) => prev + 1);\n  };\n\n  const callAPI = async (page) => {\n    console.log(page);\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/comments?_page=${page}&_limit=${LIMIT}`);\n      const data = await response.json();\n      setCommentList((prev)=>[...prev, ...data]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    callAPI(page);\n  }, [page]);\n\n  const onInterSecting = (entries) => {\n    const target = entries[0];\n    if (target.isIntersecting ) {\n      loadComment();\n    }\n  };\n\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 1 \n    };\n\n    let observer;\n    if (loadRef && commentList.length) {\n      observer = new IntersectionObserver(onInterSecting, options);\n      observer.observe(loadRef);\n    }\n    return () => observer?.disconnect();\n  }, [commentList]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.section}>\n        {commentList.map((item, idx) => {\n          return <CommentBox data={item} key={idx} />;\n        })}\n      </div>\n      <div ref={setLoadRef}>loading</div>\n    </div>\n  );\n};\n\nexport default InfiniteScrollList;\n","import InfiniteScrollList  from './components/InfiniteScrollList';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InfiniteScrollList/>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InfiniteScrollList_container__x1yd7\",\"section\":\"InfiniteScrollList_section__3rKcz\",\"item\":\"InfiniteScrollList_item__1f-q2\"};"],"sourceRoot":""}